    module game_elements (
    input wire clk,                     // Clock signal
    input wire reset,                   // Reset signal

    // Destroyable Block
    input wire [9:0] block_x,           // Block X position
    input wire [9:0] block_y,           // Block Y position
    input wire [9:0] block_width,       // Block width
    input wire [9:0] block_height,      // Block height
    input wire [9:0] arrow_x,           // Arrow X position
    input wire [9:0] arrow_y,           // Arrow Y position
    input wire [9:0] arrow_width,       // Arrow width
    input wire [9:0] arrow_height,      // Arrow height

    // Lizard Enemy
    input wire [9:0] lizard_init_x,     // Initial Lizard X position
    input wire [9:0] lizard_y,          // Lizard Y position
    input wire [9:0] lizard_width,      // Lizard width
    input wire [9:0] lizard_height,     // Lizard height
    input wire boundary_left,           // Boundary on the left
    input wire boundary_right,          // Boundary on the right

    // Campfire Enemy
    input wire [9:0] campfire_x,        // Campfire X position
    input wire [9:0] campfire_y,        // Campfire Y position
    input wire [9:0] campfire_width,    // Campfire width
    input wire [9:0] campfire_height,   // Campfire height

    // Outputs
    output reg block_visible,           // Destroyable block visibility
    output reg [9:0] lizard_x_out,      // Updated Lizard X position
    output reg lizard_direction         // Lizard direction: 0 = left, 1 = right
);

    // Parameters
    parameter LIZARD_SPEED = 1;         // Lizard movement speed

    // Destroyable Block Collision Detection
    wire block_collision_top    = (arrow_y + arrow_height >= block_y);
    wire block_collision_bottom = (arrow_y <= block_y + block_height);
    wire block_collision_left   = (arrow_x + arrow_width >= block_x);
    wire block_collision_right  = (arrow_x <= block_x + block_width);

    wire block_collision = block_collision_top && block_collision_bottom &&
                           block_collision_left && block_collision_right;

    // Destroyable Block State Update
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            block_visible <= 1'b1; // Reset: Block is visible
        end else if (block_collision) begin
            block_visible <= 1'b0; // Block is destroyed upon collision with arrow
        end
    end

    // Lizard Movement and Collision Logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            lizard_x_out <= lizard_init_x; // Reset lizard to initial position
            lizard_direction <= 1'b1;     // Start moving right
        end else begin
            // Reverse direction on boundary hit
            if ((lizard_direction == 1'b0 && boundary_left) ||
                (lizard_direction == 1'b1 && boundary_right)) begin
                lizard_direction <= ~lizard_direction; // Reverse direction
            end

            // Update lizard position based on direction
            if (lizard_direction) begin
                lizard_x_out <= lizard_x_out + LIZARD_SPEED; // Move right
            end else begin
                lizard_x_out <= lizard_x_out - LIZARD_SPEED; // Move left
            end
        end
    end
endmodule

    
